## 대소문자 이슈 (casing 이슈, Git 인덱스에서 제거로 해결)

### 0. 참고 자료

```bash
- https://chatgpt.com/share/d354abdb-9c05-4ec0-80c9-994f36315f29
```

### 1. 오류 상황

- git lab

```
antschool-web-app  | src/components/AppRouter.tsx(20,31): error TS1261: Already included file name '/usr/app/antschool-web-app/src/pages/Board/Create/article/index.tsx' differs from file name '/usr/app/antschool-web-app/src/pages/Board/create/article/index.tsx' only in casing.
```

- 동일 파일에 2개의 경로가 물려 있는 경우

```bash
nextinnovation@DESKTOP-LHQ5S8E MINGW64 ~/Desktop/NextInnonavtion/projects/antschool/antschool-web-app (develop)
$ git ls-files | grep -i 'create/article/index.tsx'
src/pages/Board/Create/article/index.tsx
src/pages/Board/create/article/index.tsx
```

![Image](https://i.imgur.com/foZaAFC.jpeg)

![Image](https://i.imgur.com/1sp6Nfu.jpeg)

### 2. 도움이 된 것들

1. 실제로, 해당 파일이, 어떤 경로에 물려 있는지를 확인

```bash
nextinnovation@DESKTOP-LHQ5S8E MINGW64 ~/Desktop/NextInnonavtion/projects/antschool/antschool-web-app (develop)
$ git ls-files | grep -i 'create/article/index.tsx'
src/pages/Board/Create/article/index.tsx
```

2. ⭐Git 인덱스에서 잘못된 경로가 cache 에 남아있는 것을 지우고⭐ -> 현재 올바른 디렉토리를 저장하고 -> 다시 커밋을 올림

```bash
nextinnovation@DESKTOP-LHQ5S8E MINGW64 ~/Desktop/NextInnonavtion/projects/antschool/antschool-web-app (develop)
$ git ls-files | grep -i 'create/article/index.tsx'
src/pages/Board/Create/article/index.tsx
src/pages/Board/create/article/index.tsx

nextinnovation@DESKTOP-LHQ5S8E MINGW64 ~/Desktop/NextInnonavtion/projects/antschool/antschool-web-app (develop)
$ git rm --cached src/pages/Board/create/article/index.tsx
rm 'src/pages/Board/create/article/index.tsx'

nextinnovation@DESKTOP-LHQ5S8E MINGW64 ~/Desktop/NextInnonavtion/projects/antschool/antschool-web-app (develop)
$ git add src/pages/Board/Create/article/index.tsx

nextinnovation@DESKTOP-LHQ5S8E MINGW64 ~/Desktop/NextInnonavtion/projects/antschool/antschool-web-app (develop)
$ git commit -m "fix: index.tsx 까지의 경로를 Board>Create 로 변경한 커밋"
[develop f4b1ac1] fix: index.tsx 까지의 경로를 Board>Create 로 변경한 커밋
 2 files changed, 1 insertion(+), 128 deletions(-)
 delete mode 100644 src/pages/Board/create/article/index.tsx

nextinnovation@DESKTOP-LHQ5S8E MINGW64 ~/Desktop/NextInnonavtion/projects/antschool/antschool-web-app (develop)
$ git push origin develop


nextinnovation@DESKTOP-LHQ5S8E MINGW64 ~/Desktop/NextInnonavtion/projects/antschool/antschool-web-app (develop)
$ git ls-files | grep -i 'create/article/index.tsx'
src/pages/Board/Create/article/index.tsx
```

### 3. 해결!

1. create/article/index.tsx 를 확인할 때, 물려있는 경로가 하나임!

![Image](https://i.imgur.com/BX1YLDX.png)

2. jenkins 에서 오류 메시지 없음
   ![Image](https://i.imgur.com/h5pSdjQ.png)

## 샌드버드 사용자 목록 나오지 않는 이슈

### 문제 상황

```
음... 여전히 안 나옴
```

![Image](https://i.imgur.com/CvwuzvJ.png)

### 접근 방식

```bash
[힌트 1]
ChannelListPage 에서 useGroupChannel={false} 면, 곧바로 <OpenChannelList> 이 호출되고, 목록이 조회됨

[힌트 2]
그러면, 우선, GroupChannelList 컴포넌트가 '언제' 조회되는가의 문제!

[action-1]
- GroupChannelList 가 로드될 때, sendBird 객체를 가져와서 초기화 시키자
- 더 나아가서 목록 가져오는 함수를 만들어둔게 있으니 그걸 활용! 'getGroupChannels'
```

### 결과

![Image](https://i.imgur.com/qfOhxLL.png)

```jsx
import SendBirdChannelList from "@sendbird/uikit-react/GroupChannelList";
import { useHistory } from "react-router-dom";
import { useCallback, useEffect, useState } from "react";
import { GroupChannelListProviderProps } from "@sendbird/uikit-react/types/modules/GroupChannelList/context/GroupChannelListProvider";
import useChatUrl from "@/src/pages/Chat/_component/useChatUrl";
import GroupChannelListHeader from "@sendbird/uikit-react/GroupChannelList/components/GroupChannelListHeader";
import { getGroupChannels } from "@/src/lib/sendbird/getGroupChannels";

type OnChannelCreated = GroupChannelListProviderProps["onChannelCreated"];
type OnChannelSelect = GroupChannelListProviderProps["onChannelSelect"];

const GroupChannelList = () => {
  const history = useHistory();
  const getUrl = useChatUrl();
  const [selectedChannelUrl, setSelectedChannelUrl] = useState<string>();
  const onChannelCreated = useCallback<OnChannelCreated>((channel) => {
    setSelectedChannelUrl(channel.url);
    history.push(getUrl(channel.url).channelFullUrl);
  }, []);
  const onChannelSelect = useCallback<OnChannelSelect>((channel) => {
    if (channel) {
      history.push(getUrl(channel.url).channelFullUrl);
      return;
    }

    history.replace(getUrl().root);
  }, []);

  useEffect(() => {
    getGroupChannels({
      userName: "music_oh",
    })
      .then()
      .catch(alert);
  }, []);

  return (
    <SendBirdChannelList
      disableAutoSelect
      selectedChannelUrl={selectedChannelUrl}
      onChannelCreated={onChannelCreated}
      onChannelSelect={onChannelSelect}
      renderHeader={() => <GroupChannelListHeader renderIconButton={() => <></>} />}
    />
  );
};

export default GroupChannelList;
```

### 추가 해야 할 것

1. 등장했을 때, 최신 목록이 위에 뜨게 하는 거

## [240820] 테스트 백엔드 환경 만들기

### 1. 현재 백엔드 구축이 안 되어 있음. 더미로 프론트 만들 수 있게 해서 작업하기

- 아래 DB 필드 참고
  ![Image](https://i.imgur.com/IYNDDzi.png)

- [오해한 것 하나] DB 에서 백엔드가 넘기는 필드로 바로 가지 않음. -> 그래서, 위에 것을 바로 보면 안 됨. 우선, 사용자 단 필드를 참고해서 할 수 밖에 없음.

### 2. [어려웠던 것] 타입을 맞춰주는게 어려웠음 | 데이터만 갈아끼우면 될 수 있게

```jsx
// ------- 더미 API 코드 -
const getUsers = async (): Promise<IResDataList> => {
  const testData: ItestData = {
    code: 200,
    data: dummyUsers,
  };
  return {
    items: testData.data,
    total_items: testData.data.length,
    total_pages: 1, // 고정값 설정
  };
};
```

```jsx
// 사용자 데이터 타입 정의 (선택사항)
export interface IUser {
  id: number;
  user_grade: string;
  email: string;
  name: string;
  nickname: string;
  phone: string;
  total_community_post: string;
  total_comment: string;
  total_likes: string;
  total_scrap: string;
  create_at: string;
  update_at: string;
  user_state: string
}
// API 응답 타입 정의
export interface ItestData {
  code: number;
  data: IUser[];
}

// IResDataList 타입 정의
export interface IResDataList {
  items: IUser[];
  total_items: number;
  total_pages: number;
}

// 더미 사용자 데이터
export const dummyUsers: IUser[] = [
  {
    id: 1,
    user_grade: "VIP",
    email: "good@naver.com",
    name: "dj",
    nickname: "djgogo",
    phone: "010-1230-0000",
    total_community_post: "11",
    total_comment: "77",
    total_likes: "123",
    total_scrap: "321",
    create_at: "2024-08-01",
    update_at: "2024-08-11",
    user_state: "유료회원",
  },
```

### 3. 더 발전해볼 것

```bash
1. 진짜 CRUD 를 할 수 있는 더미 구조를 만들면 좋을 것 같다.
2. 그러면, 필드값만 바꿔주면 되니까! ⭐⭐⭐⭐⭐⭐

```

## [240820-1730] 클릭하면 form 작성할 수 있는 modal 창 만들기

### 1. [⭐⭐⭐⭐⭐ 궁금한 것] 왜 굳이 recoil 로 만들었을까?

- 이게 현재 useModal 관련 전체 코드

```jsx
import { useCallback } from "react";
import { useRecoilState } from "recoil";
import { modalState } from "../atoms/atom";

export type OpenModalType = {
  title: string,
  content: JSX.Element | string,
  isBtn?: boolean,
  callback?: () => void,
  onReset?: () => void,
};

// 모달창 전체 상태관리
export const useModal = () => {
  const [modalDataState, setModalDataState] = useRecoilState(modalState);

  // 모달 닫기
  const closeModal = useCallback(
    () =>
      setModalDataState((prev) => {
        return { ...prev, isOpen: false };
      }),
    [setModalDataState]
  );

  // 모달 열기
  const openModal = useCallback(
    ({ title, content, callback, onReset, isBtn }: OpenModalType) =>
      setModalDataState({
        isOpen: true,
        isBtn: isBtn,
        title: title,
        content: content,
        callBack: callback,
        onReset: onReset,
      }),
    [setModalDataState]
  );

  return { modalDataState, closeModal, openModal };
};
```

<br>

### 2. [⭐⭐⭐⭐⭐ 궁금한 것] Modal 컴포넌트 -> useModal 컴포넌트, 이렇게 구조가 되어 있네 (#📛📛📛📛📛 아직 잘 이해가 안 돼 | 단순히 코드 복잡성? )

```bash
즉, 공통 component 에서 modal 을 만들고
useModal 에서 해당 컴포넌트를 사용한다.
```

### 3. '확인' 을 클릭하면, 왜, callback 속성에 바인딩된 함수가 실행되는거지?

```bash
1. '회원 등록' 을 클릭하면 -> handleOpenModal 실행
  -> 'useModal'의 openModal 함수를 실행
  -> openModal 는
    1) 기본적으로 isOpen : true
    2) 나머지는 매개변수 받은 걸로 셋팅됨
    3) 이때, openModal은 callback 으로 1) console 과 2) closeModal 을 갖고 있게 됨
    4) 그리고, setModalDataState 를 셋팅해서, 전역변수를 업데이트 해
      -> 그럼 이게 어디서 쓰이냐면?!
      -> Modal 컴포넌트! ⭐⭐⭐⭐⭐ 에서 쓰인다.

2. Modal 컴포넌트에서는 recoil 전역 상태 변수를 받는다.
  - callBack 함수는 a) 확인 버튼의 b) onClick 속성에 바인딩 된다.
  - 그래서 결과적으로,
    1) page 에서는 useModal 의 callback 속성에, 함수를 전달하고
    2) useModal 에서, 해당 함수를 recoil 에 저장하고
    3) modal 에서 recoil 에서 꺼내쓴다. (자동 저장)
    4) 그래서, '확인 button' 을 누른 효과가 난다.
```

### 4. 작성할 수 있는 input 을 만들려면?

```bash
- content prop 으로 넘기면 된다.
- 이게, useModal -> modal 이 흐름으로 content 에 넘긴게 꽂히게 된다.
```

### pageLayout 컴포넌트로 layout 을 사용하기 ⭐⭐⭐⭐⭐

- 엉망 진창인 input 들. 그 와중에, 옆에, 있는 메뉴바가 <PageLayout/> 으로 구현되었다는 걸 알게 됨 | 그리고 나는 이 방식으로 구현 해본적이 없어서, 굉장히 좋다고 느낌

![Image](https://i.imgur.com/B9ntjrU.png)

![Image](https://i.imgur.com/g1ar5MG.png)

![Image](https://i.imgur.com/lWsfjop.png)

- 참고 코드

```jsx
return (
  <PageLayout menuTitle={processTitle("종목 등록", pathname)}>
    <FormProvider {...methods}>
      <UserUpdateForm />
      <BtnsBox
        link={{
          url: "/user",
          func: () => methods.reset(),
        }}
        active={{
          label: "등록하기",
          func: methods.handleSubmit(onSubmit),
          variant: "primaryFill",
        }}
      />
    </FormProvider>
  </PageLayout>
);
```

###

1. 테이블 헤더에 의해, email, 필드를 클릭했을 때, 특정 alert 가 생김

![Image](https://i.imgur.com/Hmb3LKL.png)

```jsx
export const headerUser = [
  /* 사용법 
    - 객체 내부의 name 속성은 api response 의 필드명과 일치 해야 함  
  */
  { header: "등급", name: ["user_grade"], width: 300 },
  {
    header: "E-mail",
    name: ["email"],
    width: 400,
    link: {
      pathname: "/user",
      slug: "user_id",
    },
  },
  { header: "이름", name: ["name"], width: 300 },
  { header: "닉네임", name: ["nickname"], width: 300 },
  { header: "휴대폰번호", name: ["phone"], width: 300 },
  { header: "게시글", name: ["total_community_post"], width: 200 },
  { header: "댓글", name: ["total_comment"], width: 200 },
  { header: "좋아요", name: ["total_likes"], width: 200 },
  { header: "스크랩", name: ["total_scrap"], width: 200 },
  { header: "가입일시", name: ["create_at"], width: 400 },
  { header: "수정일시", name: ["update_at"], width: 400 },
  { header: "상태", name: ["quited"], width: 200 }, // [❓] 여기를 quited 로 하면 왜 안 되지?
  // { header: "상태", name: ["user_state"], width: 200 }, // [🔵] 이건 작동하는데?
];
```

2. 근데, `link` 속성은 어떻게 작동하는거지?

```bash
- 결국, 3depth  props drilling 에 의한 것
- 변수 이름이 다르니까, 살짝 헷갈림
```

![Image](https://i.imgur.com/fuFhxBz.png)

<br>

3. props 에서 Link 로 변경되는 패턴 말고, 함수를 넣게 되면, 다른 경우에 대비하기 힘들 수도 있지 않을까. (왜냐면, 이미 만들어서 사용되고 있는 패턴이니까.) -> 그러면, link 이동을 최대한 존중하면서 modal 을 띄우려면, query 에 상태값을 던져서 '쿼리 파라미터'를 사용해보는건?

```jsx
  {
    header: "E-mail",
    name: ["email"],
    width: 400,
    link: {
      pathname: "/user?modal=true",
      slug: "user_id",
    },
  },
```
